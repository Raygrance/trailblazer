import json
import matplotlib.pyplot as plt
from matplotlib_venn import venn2
import argparse

# LABEL1 = "Trailblazer Mutation"
# LABEL2 = "Trailblazer Mutation Overflow"

def createVennDiagrams(path1: str, path2:str):
    """
    creates a venn diagram of code covered across different tests
    code coverage reports generated by C8
    """

    LABEL1 = "Generation Only"
    LABEL2 = "Overflow Mutation"

    # reads json files 
    file1, file2 = getCoverageFiles(path1, path2)

    # get data for statements, branches, functions, overall
    statement_data = [get_covered_statements(file1), get_covered_statements(file2)]
    branch_data = [get_covered_branches(file1), get_covered_branches(file2)]
    function_data = [get_covered_functions(file1), get_covered_functions(file2)]
    # alldata = [get_covered_statements(file1) | get_covered_branches(file1) | get_covered_functions(file1),
    #            get_covered_statements(file2) | get_covered_branches(file2) | get_covered_functions(file2)]

    # plot data into venn diagrams
    plt.figure(figsize=(6, 6))
    venn = venn2(statement_data, set_labels=(LABEL1, LABEL2))
    plt.title(f"Trailblazer Statement Coverage: {LABEL1} vs {LABEL2}")
    #plt.savefig(f"Statement Coverage for {LABEL1} and {LABEL2}")
    plt.show()

    plt.figure(figsize=(6, 6))
    venn = venn2(branch_data, set_labels=(LABEL1, LABEL2))
    plt.title(f"Trailblazer Branch Coverage: {LABEL1} vs {LABEL2}")
    #plt.savefig(f"Branch Coverage for {LABEL1} and {LABEL2}")
    plt.show()

    plt.figure(figsize=(6, 6))
    venn = venn2(function_data, set_labels=(LABEL1, LABEL2))
    plt.title(f"Trailblazer Function Coverage: {LABEL1} vs {LABEL2}")
    #plt.savefig(f"Function Coverage for {LABEL1} and {LABEL2}")
    plt.show()

    # plt.figure(figsize=(6, 6))
    # venn = venn2(alldata, set_labels=(LABEL1, LABEL2))
    # plt.title(f"Trailblazer Overall Coverage: {LABEL1} vs {LABEL2}")
    # #plt.savefig("Function Coverage for 5min and Trailblazer")
    # plt.show()

    # prints the statements covered by file 1 not in file 2
    # file2lines = statement_data[1] - statement_data[0]
    # sorted(file2lines)
    # for line in file2lines:
    #     print(line)



def get_covered_statements(coverage: dict):
    """
    extracts list of covered statements
    """
    covered_statements = set()
    
    # iterates through each line, appends to covered_lines if covered in testing
    for file in coverage.keys(): 
        for line in range(len(coverage[file]["s"])): 
            if coverage[file]["s"][str(line)] != 0: # covered at least once
                covered_statements.add((file, line, "s")) # adds a tuple of the file name, line number, code type for uniqueness

    return covered_statements

def get_covered_branches(coverage: dict):
    """
    extracts list of covered branches
    """
    covered_branches = set()
    
    for file in coverage.keys():
        for line in range(len(coverage[file]["b"])): 
            if coverage[file]["b"][str(line)][0] != 0: # covered at least once
                covered_branches.add((file, line, "b")) # adds a tuple of the file name, line number, code type for uniqueness
    
    return covered_branches

def get_covered_functions(coverage: dict):
    """
    extracts list of covered functions
    """
    covered_functions = set()

    for file in coverage.keys():
        for line in range(len(coverage[file]["f"])): 
                if coverage[file]["f"][str(line)] != 0: # covered at least once
                    covered_functions.add((file, line, "f")) # adds a tuple of the file name, line number, code type for uniqueness

    return covered_functions

def getCoverageFiles(path1:str, path2:str):
    """
    parses JSON files
    """
    with open(path1, "r") as f1:
        coverage1 = json.load(f1)

    with open(path2, "r") as f2:
        coverage2 = json.load(f2)

    return coverage1, coverage2



def main():
    """
    input param: paths to two JSON coverage files
    """
    parser = argparse.ArgumentParser(description="Create code coverage venn diagram from 2 JSON files")
    parser.add_argument("file1", help="a path to a json file with code coverage", type=str)
    parser.add_argument("file2", help="a path to a json file with code coverage", type=str)
    args = parser.parse_args()

    createVennDiagrams(args.file1, args.file2)



if __name__ == "__main__":
    main()