import schemathesis
from hypothesis import settings, Phase
from schemathesis.checks import not_a_server_error, status_code_conformance, content_type_conformance, response_schema_conformance, negative_data_rejection, response_headers_conformance
import json
from schemathesis import Case
from typing import List
import pickle

import path
import mutate
import random
import pytest

authentication_headers = {}

def load_spec(target):
    filename = (target+":")[:target.find(":")]  # this removes the port number from the target
    f = open("tests/" + filename + ".json", "r", encoding="utf-8")
    custom_schema_dict = json.load(f)
    f.close()

    # Define the base URL for the API
    BASE_URL = custom_schema_dict["servers"][0]["url"]

    schema = schemathesis.from_dict(custom_schema_dict, base_url=BASE_URL)

    with open("tests/" + filename + ".pkl", "rb") as file:
        ReqObjs = pickle.load(file)

    return schema, ReqObjs, custom_schema_dict

def parse_headers(headers):
    '''
    headers: str
        The headers to be used in the requests
    '''
    result = {}
    if headers:
        for h in headers:
            key, value = h.split(":", 1)
            result[key.strip()] = value.strip()
    return result

def run_fuzz(target, n, m, headers=None):
    '''
    target: str
        The target web application to be tested
    n: int
        Max number of payload to be generated by Schemathesis, per endpoint
    m: bool
        Enable Trailblazer's mutation engine, to replace half of payloads generated by Schemathesis
    headers: array of str
        The headers to be used in the requests
    '''
    schema, ReqObjs, schema_dict = load_spec(target)
    global authentication_headers 
    authentication_headers = parse_headers(headers)
    schema.headers = authentication_headers # for some reason, this doesn't work. so we have to set the headers again in the test_api function
    test_api_decorated = settings(max_examples=n)(schema.parametrize()(test_api))

    @schemathesis.hook
    def map_body(context, body):
        # Access the generated payload (case.body or case.path_parameters, etc.)
        # body = mutate.mutate(body)
        # print(context.operation.definition.raw)
        if "requestBody" not in context.operation.definition.raw:
            return body
        random.seed()
        if random.random() > 0.5 * m:  # if m is True, 50% of the chance mutate the body
            return body  # when m is False, return the original body
        for rule, method in ReqObjs:
            if context.operation.path == path.rule_to_path(rule) and \
                context.operation.method == method:
                
                # pass the grammar for current endpoint to mutation engine
                endpoint_schema = schema_dict["paths"][context.operation.path][method]["requestBody"]["content"]["application/json"]["schema"]
                body = mutate.get_mutation(ReqObjs[(rule, method)][0], endpoint_schema)
                print("--------------------")
                #case = Case(operation=context.operation, generation_time=1e-6, body=payload)
                #case.call_and_validate(checks=(not_a_server_error,negative_data_rejection))
                #examples.append(Case(operation=context.operation, generation_time=1e-6, body=payload))
                return body

        return body
    pytest.main(["-v", __file__])


# Define a test function using the custom schema
# @schema.parametrize()
# @settings(max_examples=n)
def test_api(case):
    case.headers={"Authorization": "Bearer 2bHv1-Bt_QfMeZxs-CDtVSNSZLyNARj6"} # authentication_headers # set the authentication headers for the request
    # Make a request to the API based on the generated test case
    if case.path_parameters and "id1" in case.path_parameters:
        if random.random() < 0.2: # 20% of the time, use a pre-defined value for id1
            case.path_parameters["id1"] = "trailblazer001"
    response = case.call_and_validate(checks=(not_a_server_error,negative_data_rejection))

