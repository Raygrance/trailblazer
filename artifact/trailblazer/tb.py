from argparse import ArgumentParser
from fuzz import run_fuzz
from endpoint import generate_spec_from_traffic


def run(args):
    if args.mode == "s":
        # print("Specification mode")
        generate_spec_from_traffic(args.e)
    elif args.mode == "f":
        # print("Fuzzing mode")
        # print(args.target)
        # print(args.n)
        # print(args.m)
        run_fuzz(args.target, args.n, args.m, args.header)
    elif args.mode == "r":
        print("Check Schemathesis report for results.")
    else:
        # should never reach here
        print("Invalid mode.")


if __name__ == "__main__":
    print(
        r"""
  _________               __  __  __      __
 /___  ___/              /_/ / / / /     / /
    / /  ____  ____     __  / / / /_    / / ____   ____   ___    ____
   / /  / __/ / __ \   / / / / / __ \  / / / __ \ /_  /  / _ \  / __/
  / /  / /   / /_/ /  / / / / / /_/ / / / / /_/ /  / /_ / ___/ / /   
 /_/  /_/    \___/\_\/_/ /_/ /_____/ /_/  \___/\_\/___/ \___/ /_/    
"""
    )
    parser = ArgumentParser(
        description="Trailblazer - Practical End-to-end Web API Fuzzing"
    )
    subparsers = parser.add_subparsers(
        dest="mode",
        help="Specify the mode to run: (s)pecification, (f)uzz, (r)eport",
    )
    parser_s = subparsers.add_parser("s", help="To retrieve API traffic from database, identify endpoints and generate OpenAPI specification")
    parser_s.add_argument("-e", type=int, default=5, help="Number of example payloads to be included in the generated OpenAPI specification (default: 5)")

    parser_f = subparsers.add_parser("f", help="To fuzz the API endpoints based on the OpenAPI specification")
    parser_f.add_argument("target", help="The target web application to be tested")
    parser_f.add_argument("-n", type=int, default=100, help="Max number of payload to be generated by Schemathesis, per endpoint (default: 100)")
    parser_f.add_argument("-m", action="store_true", help="Enable Trailblazer's mutation engine, to replace half of payloads generated by Schemathesis")
    parser_f.add_argument('-H', '--header', action='append', help="Custom header, e.g., 'Authorization: Bearer token'")


    args = parser.parse_args()

    run(args)
