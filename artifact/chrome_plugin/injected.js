const XHR = XMLHttpRequest.prototype

const open = XHR.open
const send = XHR.send
const setRequestHeader = XHR.setRequestHeader

// below is the code to intercept fetch requests, generated by chatGPT 
const originalFetch = window.fetch;

  // Override the fetch function
  window.fetch = async function(...args) {
    const [url, options] = args;

    method = options?.method || 'get'; // Default to 'GET' if method is not specified

    console.log('Fetch request:');
    console.log('URL:', url);
    console.log('Method:', method); // Default to 'GET' if method is not specified

    let requestBody = null;

    // Check if there is a request payload and try to parse it as JSON
    if (options && options.body) {
      try {
        requestBody = JSON.parse(options.body);
        console.log('Request Payload:', requestBody);
      } catch (error) {
        console.log('Request Payload (Not JSON):', options.body);
      }
    } else {
      console.log('Request Payload: None');
    }

    try {
      // Call the original fetch function
      const response = await originalFetch.apply(this, args);

      // Clone the response to avoid consuming the body
      const clonedResponse = response.clone();

      //console.log("==================", await clonedResponse.text(), clonedResponse)

      // Try to read and parse the response body as JSON
      const responseBody = await clonedResponse.text();
      let parsedResponseBody;
      try {
        parsedResponseBody = JSON.parse(responseBody);
      } catch (error) {
        return response; // If the response is not JSON, return early, Return the original response
        parsedResponseBody = responseBody;
      }

      console.log('Status:', clonedResponse.status);
      console.log('Response Payload:', parsedResponseBody);

      try {
        // Send the message to the extension
        var msg = {"host": window.location.host, "url": url, "method": method, "query": "", "request": requestBody, "response": parsedResponseBody, "responsecode": clonedResponse.status}
        var event = document.createEvent('CustomEvent');
        event.initCustomEvent("mafuzzmessage", true, true, msg);
        window.dispatchEvent(event);
      }
      catch (error) {
        console.error('Error sending message to extension:', error);
      }

      return response; // Return the original response
    } catch (error) {
      console.error('Fetch error:', error);
      throw error;
    }
  };
/* above is the code to intercept fetch requests */


XHR.open = function (method, url) {
    //this._requestHeaders = {}
    this._url = url
    this._method = method
    return open.apply(this, arguments)
}

XHR.setRequestHeader = function (header, value) {
    //this._requestHeaders[header] = value
    return setRequestHeader.apply(this, arguments)
}

XHR.send = function (postData) {
    //console.log(postData)
    //console.log(this)
    //console.log("A request is being sent.")
    this.postData = postData
    this.addEventListener('load', function (evt) {
        //const url = this.responseURL
        //const responseHeaders = this.getAllResponseHeaders()
        try {
            if (this.responseType != 'blob') {
                //let responseBody
                if (this.responseType === '' || this.responseType === 'text') {
                    responseBody = JSON.parse(this.responseText)
                } else /* if (this.responseType === 'json') */ {
                    responseBody = this.response
                }
                
                var msg = {"host": window.location.host, "url": this._url, "method": this._method, "query": "", "request": JSON.parse(evt.currentTarget.postData), "response": responseBody, "responsecode": this.status}
                //console.log(msg)
                var event = document.createEvent('CustomEvent');
                event.initCustomEvent("mafuzzmessage", true, true, msg);
                window.dispatchEvent(event);
                //window.postMessage(msg)
                
            }
        } catch (err) {
            console.debug("Error reading or processing response.", err)
        }
    })

    return send.apply(this, arguments)
}


function upstream(req, resp) {
    const xhr = new XMLHttpRequest();
                xhr.open("POST", 'http://127.0.0.1:8086/record', true);

                //Send the proper header information along with the request
                xhr.setRequestHeader("Content-Type", "application/json");
                
                xhr.send(resp);
}